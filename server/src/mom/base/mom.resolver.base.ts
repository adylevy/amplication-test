/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Mom } from "./Mom";
import { MomCountArgs } from "./MomCountArgs";
import { MomFindManyArgs } from "./MomFindManyArgs";
import { MomFindUniqueArgs } from "./MomFindUniqueArgs";
import { CreateMomArgs } from "./CreateMomArgs";
import { UpdateMomArgs } from "./UpdateMomArgs";
import { DeleteMomArgs } from "./DeleteMomArgs";
import { MomService } from "../mom.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Mom)
export class MomResolverBase {
  constructor(
    protected readonly service: MomService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "read",
    possession: "any",
  })
  async _momsMeta(
    @graphql.Args() args: MomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Mom])
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "read",
    possession: "any",
  })
  async moms(@graphql.Args() args: MomFindManyArgs): Promise<Mom[]> {
    return this.service.moms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Mom, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "read",
    possession: "own",
  })
  async mom(@graphql.Args() args: MomFindUniqueArgs): Promise<Mom | null> {
    const result = await this.service.mom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mom)
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "create",
    possession: "any",
  })
  async createMom(@graphql.Args() args: CreateMomArgs): Promise<Mom> {
    return await this.service.createMom({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mom)
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "update",
    possession: "any",
  })
  async updateMom(@graphql.Args() args: UpdateMomArgs): Promise<Mom | null> {
    try {
      return await this.service.updateMom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mom)
  @nestAccessControl.UseRoles({
    resource: "Mom",
    action: "delete",
    possession: "any",
  })
  async deleteMom(@graphql.Args() args: DeleteMomArgs): Promise<Mom | null> {
    try {
      return await this.service.deleteMom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
